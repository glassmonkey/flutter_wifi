// Autogenerated from Pigeon (v0.1.15), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package nagano.shunsuke.plugins;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.ArrayList;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings("unused")
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class WifiResponse {
    private Boolean availableDetect;
    public Boolean getAvailableDetect() { return availableDetect; }
    public void setAvailableDetect(Boolean setterArg) { this.availableDetect = setterArg; }

    private Boolean availableWifi;
    public Boolean getAvailableWifi() { return availableWifi; }
    public void setAvailableWifi(Boolean setterArg) { this.availableWifi = setterArg; }

    private Boolean availableMobile;
    public Boolean getAvailableMobile() { return availableMobile; }
    public void setAvailableMobile(Boolean setterArg) { this.availableMobile = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("availableDetect", availableDetect);
      toMapResult.put("availableWifi", availableWifi);
      toMapResult.put("availableMobile", availableMobile);
      return toMapResult;
    }
    static WifiResponse fromMap(HashMap map) {
      WifiResponse fromMapResult = new WifiResponse();
      Object availableDetect = map.get("availableDetect");
      fromMapResult.availableDetect = (Boolean)availableDetect;
      Object availableWifi = map.get("availableWifi");
      fromMapResult.availableWifi = (Boolean)availableWifi;
      Object availableMobile = map.get("availableMobile");
      fromMapResult.availableMobile = (Boolean)availableMobile;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class WifiRequest {
    private Boolean isDetect;
    public Boolean getIsDetect() { return isDetect; }
    public void setIsDetect(Boolean setterArg) { this.isDetect = setterArg; }

    HashMap toMap() {
      HashMap<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isDetect", isDetect);
      return toMapResult;
    }
    static WifiRequest fromMap(HashMap map) {
      WifiRequest fromMapResult = new WifiRequest();
      Object isDetect = map.get("isDetect");
      fromMapResult.isDetect = (Boolean)isDetect;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class CallbackApi {
    private final BinaryMessenger binaryMessenger;
    public CallbackApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    public void apply(WifiResponse argInput, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.CallbackApi.apply", new StandardMessageCodec());
      HashMap inputMap = argInput.toMap();
      channel.send(inputMap, channelReply -> {
        callback.reply(null);
      });
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface Api {
    WifiResponse call(WifiRequest arg);

    /** Sets up an instance of `Api` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, Api api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.Api.call", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            HashMap<String, HashMap> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              WifiRequest input = WifiRequest.fromMap((HashMap)message);
              WifiResponse output = api.call(input);
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static HashMap wrapError(Exception exception) {
    HashMap<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
